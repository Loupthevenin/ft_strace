#!/bin/bash

OUT_C="srcs/syscall_names.c"
OUT_H="includes/syscall_names.h"

FILE_64="/usr/include/x86_64-linux-gnu/asm/unistd_64.h"
FILE_32="/usr/include/x86_64-linux-gnu/asm/unistd_32.h"

cat >$OUT_H <<EOF
/* Autogenerated syscall names */

#ifndef SYSCALL_NAMES_H
#define SYSCALL_NAMES_H

const char **get_syscall_names_64(void);
const char **get_syscall_names_32(void);

#endif
EOF

extract_syscalls() {
	local file="$1"
	# On cherche les lignes du type #define __NR_<name> <num>
	# On trie par numéro (col 3), et on récupère le nom
	grep '^#define __NR_' "$file" |
		awk '{print $2, $3}' |
		sort -k2n |
		awk '{print $1}' |
		sed 's/__NR_//'
}

syscalls_64=($(extract_syscalls "$FILE_64"))
syscalls_32=($(extract_syscalls "$FILE_32"))

{
	echo "/* Autogenerated syscall names implementation */"
	echo "#include \"../includes/$OUT_H\""
	echo ""

	# Fonction 64 bits
	echo "const char **get_syscall_names_64(void)"
	echo "{"
	echo "    static const char *syscall_names_64[] = {"
	for name in "${syscalls_64[@]}"; do
		echo "        \"$name\","
	done
	echo "    };"
	echo "    return syscall_names_64;"
	echo "}"
	echo ""

	# Fonction 32 bits
	echo "const char **get_syscall_names_32(void)"
	echo "{"
	echo "    static const char *syscall_names_32[] = {"
	for name in "${syscalls_32[@]}"; do
		echo "        \"$name\","
	done
	echo "    };"
	echo "    return syscall_names_32;"
	echo "}"

} >$OUT_C
